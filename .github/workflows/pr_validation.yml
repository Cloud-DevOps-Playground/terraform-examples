name: Validate terraform configurations for cloud resources

on:
  # push:
  #   branches-ignore: [ "main" ]
  #   paths:
  #     - 'ec2/**/*'
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  check_ws_changes:
    name: Check files

    outputs:
      run_ec2_ipv4_job: ${{ steps.check_files.outputs.run_ec2_ipv4_job }}
      run_ec2_ipv6_job: ${{ steps.check_files.outputs.run_ec2_ipv6_job }}
      run_iam_job: ${{ steps.check_files.outputs.run_iam_job }}
      run_key_management_job: ${{ steps.check_files.outputs.run_key_management_job }}
      run_s3_job: ${{ steps.check_files.outputs.run_s3_job }}
      run_vpc_job: ${{ steps.check_files.outputs.run_vpc_job }}

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code to flag modifications
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo "$file"
            if [[ $file == ec2_ipv4/* ]]; then
              echo "run_ec2_ipv4_job=true" >> $GITHUB_OUTPUT
            elif [[ $file == ec2_ipv6/* ]]; then
              echo "run_ec2_ipv6_job=true" >> $GITHUB_OUTPUT
            elif [[ $file == iam/* ]]; then
              echo "run_iam_job=true" >> $GITHUB_OUTPUT
            elif [[ $file == key_management/* ]]; then
              echo "run_key_management_job=true" >> $GITHUB_OUTPUT
            elif [[ $file == s3/* ]]; then
              echo "run_s3_job=true" >> $GITHUB_OUTPUT
            elif  [[ $file == vpc/* ]]; then
              echo "run_vpc_job=true" >> $GITHUB_OUTPUT
            else
              echo "This modified file is not under the 'ec2_ipv4', 'ec2_ipv6', 'iam', 'key_management', 's3' or 'vpc' folder."
            fi
          done < files.txt

  ec2_ipv4_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_ec2_ipv4_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: ec2_ipv4

  ec2_ipv6_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_ec2_ipv6_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: ec2_ipv6

  iam_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_iam_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: iam

  key_management_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_key_management_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: key_management

  s3_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_s3_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: s3

  vpc_validation:
    needs: check_ws_changes
    if: needs.check_ws_changes.outputs.run_vpc_job == 'true'
    uses: ./.github/workflows/terraform_validator.yml
    with:
      workdir: vpc

  pr_update_for_ec2_ipv4:
    runs-on: ubuntu-latest
    needs: ec2_ipv4_validation

    steps:
      - name: Comment on PR for EC2 IPv4 changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            const output = `
            <details>
            <summary>Validation Output for EC2 IPv4 related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.ec2_ipv4_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.ec2_ipv4_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.ec2_ipv4_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  pr_update_for_ec2_ipv6:
    runs-on: ubuntu-latest
    needs: ec2_ipv6_validation

    steps:
      - name: Comment on PR for EC2 IPv6 changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            const output = `
            <details>
            <summary>Validation Output for EC2 IPv6 related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.ec2_ipv6_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.ec2_ipv6_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.ec2_ipv6_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  pr_update_for_iam:
    runs-on: ubuntu-latest
    needs: iam_validation

    steps:
      - name: Comment on PR for IAM changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            const output = `
            <details>
            <summary>Validation Output for IAM related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.iam_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.iam_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.iam_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  pr_update_for_key_management:
    runs-on: ubuntu-latest
    needs: key_management_validation

    steps:
      - name: Comment on PR for AWS Key-Pair management changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            const output = `
            <details>
            <summary>Validation Output for AWS Key-Pair management related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.key_management_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.key_management_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.key_management_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  pr_update_for_s3:
    runs-on: ubuntu-latest
    needs: s3_validation

    steps:
      - name: Comment on PR for S3 changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `
            <details>
            <summary>Validation Output for S3 related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.s3_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.s3_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.s3_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  pr_update_for_vpc:
    runs-on: ubuntu-latest
    needs: vpc_validation

    steps:
      - name: Comment on PR for VPC changes
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `
            <details>
            <summary>Validation Output for VPC related changes</summary>
            <p>#### Terraform Initialization ‚öôÔ∏è\`${{ needs.vpc_validation.outputs.init_outcome }}\`</p>
            <p>#### Terraform Format and Style üñå\`${{ needs.vpc_validation.outputs.fmt_outcome }}\`</p>
            <p>#### Terraform Validation ü§ñ\`${{ needs.vpc_validation.outputs.validate_outcome }}\`</p>
            </details>

            *Pusher: @${{ github.actor }},
            Action: \`${{ github.event_name }}\`,
            Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
